import numpy as np
import pandas as pd
from sklearn.linear_model import Lasso, Ridge
from sklearn.experimental import enable_halving_search_cv, enable_hist_gradient_boosting
from sklearn.ensemble import RandomForestClassifier, AdaBoostingClassifier, GradientBoostingClassifier, HistGradientBoostingClassifier
from sklearn.model_selection import cross_val_score,train_test_split, GridSearchCV, RandomizedSearchCV, HalvingGridSearchCV, HalvingRandomSearchCV
from sklearn.metrics import classification_report, f1_score, confusion_matrix, plot_confusion_matrix

class BuildModel():

    def __init__(self, data, model_list, search_cv, params, cross_val):
        '''Creates model object from dataframe using cross validation.
        Parameters
        ---------
        data : DataFrame
            DataFrame created from JSONtoFeatureDF
        model_list : list of model objects
            List of model objects including ()
        search_cv : cv object
            Name of Cross Validation object to us without ()
        params : dictionary of dictionaries
            Dictionary of dictionary formated parameters to test
        cross_val : int
            Cross validation splitting strategy
        '''
        self.data = data
        self.model_list = model_list
        self.search_cv = search_cv
        self.params = params
        self.cross_val = cross_val

    def train_test(self):
        y = self.data['label']
        X = self.data.drop(columns=['entityId','label'])
        return train_test_split(X,y)
    
    def run_search_cv(self):

        x_train, x_test, y_train, y_test = self.train_test()
        best_params = []
        best_score = []
        best_model = []
        for model in self.model_list:
            temp_model = self.search_cv(model, self.params, cv=self.cross_val)
            temp_model.fit(x_train,y_train)
            best_params.append(temp_model.best_params_)
            best_score.append(temp_model.best_score_)
            best_model.append(temp_model)
        best_perform = max(best_score)
        best_idx = best_score.index(best_perform)
        print(f'Best score: {round(best_perform, 2)} with parameters: {best_params[best_idx]}')
        return best_model[best_idx]


if __name__ == '__main__':
    from data_collection import JSONtoFeatureDF

    folder_list = ['Crypto','Zeus','Locker','APT1']
    folder_path = '../../data/MalwareTrainingSets/trainingSets/'
    df = JSONtoFeatureDF(folder_path,folder_list)
    # data.create_MongoDB()
    modeling_df = df.make_modeling_df()
    # print(modeling_df)
    model_list = [GradientBoostingClassifier()]
    search_cv = GridSearchCV
    params = {
            "loss":["deviance"],
            "learning_rate": [0.155, 0.16, 0.165],
            "max_depth":[4, 3, 2],
            "max_features":["sqrt"],
            "n_estimators": [50, 55, 60]}
    cross_val = 5
    obj = BuildModel(modeling_df, model_list, search_cv, params, cross_val)
    model_score = obj.run_search_cv()
    print(model_score)
