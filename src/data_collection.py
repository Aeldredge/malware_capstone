import numpy as np
import pandas as pd
import json
import os
from pymongo import MongoClient
client = MongoClient('localhost', 27017)
malware_db = client['malware_db']
class JSONtoFeatureDF():

    def __init__(self, folder_path, folder_list):
        '''Create combine dataframe of JSON malware samples from seperate folders.
        Parameters
        ---------
        folder_path : string
            File path from current location to location of folders in folder_list.
        folder_list : list of strings
            Folders to be accessed for malware data files.
        '''
        
        self.folder_path = folder_path
        self.folder_list = folder_list

    def create_file_dictionary(self):

        file_dict = {}
        for folder in self.folder_list:
            files = os.listdir(f'{self.folder_path}{folder}/')
            file_dict[folder] = []
            for file in files:
                file_dict[folder].append(file)
        return file_dict

    def create_MongoDB(self):
        
        for folder, files in self.create_file_dictionary().items():
            Collection = malware_db[folder]
            for file in files:
                with open(f'{self.folder_path}{folder}/{file}') as file:
                    file_data = json.load(file)
                if isinstance(file_data, list):
                    Collection.insert_many(file_data)  
                else:
                    Collection.insert_one(file_data)
        print('MongoDB collections created.')

    def collection_to_formatted_df(self, folder):

        temp_folder_df = pd.DataFrame(list(malware_db[folder].find()))
        mid_folder_df = pd.DataFrame(list(temp_folder_df['properties']))
        final_folder_df = pd.DataFrame(temp_folder_df['entityId']).join(mid_folder_df).fillna(0)
        targets_df = final_folder_df.pop('label')
        return final_folder_df.applymap(lambda cell: len(cell.split()) if isinstance(cell,str) else cell).join(targets_df)

    def make_modeling_df(self):
        
        for idx, folder in enumerate(self.folder_list):
            if idx == 0:
                training_df = self.collection_to_formatted_df(folder)
            else:
                training_df = training_df.append(self.collection_to_formatted_df(folder), ignore_index=True, sort=False)
        return training_df.fillna(0)




if __name__ == '__main__':
    
    folder_list = ['Crypto','Zeus','Locker','APT1']
    folder_path = '../../data/MalwareTrainingSets/trainingSets/'

    data = JSONtoFeatureDF(folder_path,folder_list)
    # new_df.create_MongoDB()  '''Commented out because only need to create db once.  If running for the first time, uncomment.'''
    df = data.make_modeling_df()
    print(df)